import QtQuick 2.7
import Lomiri.Components 1.3
import QtQuick.Layouts 1.3
import "../../common/constants"

Item {
    id: richTextEditor
    width: parent ? parent.width : 400
    height: parent ? parent.height : 300

    property bool editMode: true
    property alias text: textEdit.text
    property alias readOnly: textEdit.readOnly
    property int fontSize: units.gu(2)
    property string initialText: ""

    signal contentChanged(string text)

    function selectAll() { textEdit.selectAll() }
    function clear() { textEdit.clear() }
    
    // Initialize content when component is ready
    Component.onCompleted: {
        if (initialText) {
            textEdit.text = initialText
        }
        Qt.callLater(function() {
            if (textEdit) {
                textEdit.focus = true
            }
        })
    }
    
    // Watch for changes to initialText
    onInitialTextChanged: {
        if (initialText !== undefined && textEdit && textEdit.text !== initialText) {
            textEdit.text = initialText
        }
    }

    ColumnLayout {
        anchors.fill: parent
        spacing: units.gu(1)

        // Toolbar at the top
        Rectangle {
            visible: editMode
            Layout.fillWidth: true
            Layout.preferredHeight: units.gu(6)
            color: theme.palette.normal.background
            border.color: theme.palette.normal.base
            border.width: 1
            radius: units.gu(0.5)

            ScrollView {
                anchors.fill: parent
                anchors.margins: units.gu(0.5)
                
                Row {
                    id: formatToolbar
                    spacing: units.gu(0.5)
                    height: parent.height

                    Button {
                        width: units.gu(4)
                        height: units.gu(4)
                        text: "B"
                        font.bold: true
                        color: theme.palette.normal.foreground
                        onClicked: {
                            console.log("Bold button clicked")
                            insertFormatting('<b>', '</b>')
                        }
                    }
                    Button {
                        width: units.gu(4)
                        height: units.gu(4)
                        text: "I"
                        font.italic: true
                        color: theme.palette.normal.foreground
                        onClicked: {
                            console.log("Italic button clicked")
                            insertFormatting('<i>', '</i>')
                        }
                    }
                    Button {
                        width: units.gu(4)
                        height: units.gu(4)
                        text: "U"
                        font.underline: true
                        color: theme.palette.normal.foreground
                        onClicked: {
                            console.log("Underline button clicked")
                            insertFormatting('<u>', '</u>')
                        }
                    }
                    Button {
                        width: units.gu(5)
                        height: units.gu(4)
                        text: "H1"
                        font.bold: true
                        color: theme.palette.normal.foreground
                        onClicked: {
                            console.log("Heading button clicked")
                            insertFormatting('<h3>', '</h3>')
                        }
                    }
                    Button {
                        width: units.gu(5)
                        height: units.gu(4)
                        text: "List"
                        color: theme.palette.normal.foreground
                        onClicked: {
                            console.log("List button clicked")
                            insertList()
                        }
                    }
                    Button {
                        width: units.gu(6)
                        height: units.gu(4)
                        text: "Clear"
                        color: theme.palette.normal.foreground
                        onClicked: {
                            console.log("Clear button clicked")
                            clearFormatting()
                        }
                    }
                }
            }
        }

        // Text editor area
        ScrollView {
            id: textScrollView
            Layout.fillWidth: true
            Layout.fillHeight: true

            TextEdit {
                id: textEdit
                width: textScrollView.width
                height: Math.max(textScrollView.height, contentHeight)
                wrapMode: TextEdit.Wrap
                selectByMouse: true
                font.pixelSize: richTextEditor.fontSize
                readOnly: !editMode
                color: theme.palette.normal.baseText
                
                // Enable rich text formatting
                textFormat: TextEdit.RichText
                
                // Use HTML for proper rendering
                property string htmlContent: ""
                
                onTextChanged: {
                    // Store HTML content
                    htmlContent = text
                    richTextEditor.contentChanged(text)
                }
                
                // Handle key shortcuts
                Keys.onPressed: {
                    if (event.modifiers & Qt.ControlModifier) {
                        if (event.key === Qt.Key_B) {
                            insertFormatting('<b>', '</b>')
                            event.accepted = true
                        } else if (event.key === Qt.Key_I) {
                            insertFormatting('<i>', '</i>')
                            event.accepted = true
                        } else if (event.key === Qt.Key_U) {
                            insertFormatting('<u>', '</u>')
                            event.accepted = true
                        }
                    }
                }
                
                // Force HTML rendering when content changes
                Component.onCompleted: {
                    textFormat = TextEdit.RichText
                }
            }
        }
    }

    // --- Formatting functions ---
    function insertFormatting(openTag, closeTag) {
        console.log("Applying formatting:", openTag, closeTag)
        
        if (!textEdit) {
            console.log("TextEdit not ready")
            return
        }
        
        // Try a different approach - change font properties instead of inserting HTML
        if (openTag === '<b>') {
            textEdit.font.bold = !textEdit.font.bold
            console.log("Bold toggled:", textEdit.font.bold)
        } else if (openTag === '<i>') {
            textEdit.font.italic = !textEdit.font.italic
            console.log("Italic toggled:", textEdit.font.italic)
        } else if (openTag === '<u>') {
            textEdit.font.underline = !textEdit.font.underline
            console.log("Underline toggled:", textEdit.font.underline)
        } else if (openTag === '<h3>') {
            textEdit.font.bold = true
            textEdit.font.pixelSize = richTextEditor.fontSize * 1.5
            console.log("Heading applied")
        }
        
        textEdit.focus = true
    }
    
    function insertList() {
        console.log("Inserting list")
        
        var pos = textEdit.cursorPosition
        var fullText = textEdit.text
        
        var listHtml = '<ul><li>Item 1</li><li>Item 2</li><li>Item 3</li></ul>'
        
        var beforeText = fullText.substring(0, pos)
        var afterText = fullText.substring(pos)
        
        textEdit.text = beforeText + listHtml + afterText
        textEdit.cursorPosition = pos + listHtml.length
        textEdit.focus = true
    }
    
    function clearFormatting() {
        console.log("Clearing formatting")
        
        var start = textEdit.selectionStart
        var end = textEdit.selectionEnd
        
        if (start !== end) {
            // Clear formatting from selection only
            var fullText = textEdit.text
            var selectedText = fullText.substring(start, end)
            var plainText = selectedText.replace(/<[^>]*>/g, '')
            
            var beforeText = fullText.substring(0, start)
            var afterText = fullText.substring(end)
            
            textEdit.text = beforeText + plainText + afterText
            textEdit.cursorPosition = start + plainText.length
        } else {
            // Clear all formatting
            var plainText = textEdit.text.replace(/<[^>]*>/g, '')
            textEdit.text = plainText
        }
        
        textEdit.focus = true
    }
    
    // Public functions for external use
    function setText(content) {
        textEdit.text = content || ""
    }
    
    function getText() {
        return textEdit.text
    }
    
    function focusEditor() {
        textEdit.focus = true
    }
}